org: gonzaloan
app: aws-thumbnail
service: aws-thumbnail

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  profile: serverless
  stage: dev
  timeout: 30
  memorySize: 512
  environment:
    THUMBNAIL_SIZE: 128
    REGION_NAME: ${self:provider.region}
    DYNAMODB_TABLE: ${self:custom.dynamoTable}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetBucketLocation
            - s3:CreateBucket
            - s3:DeleteBucket
            - s3:PutBucketPolicy
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: '*'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

custom:
  bucket: gonmunoz-thumbnails
  dynamoTable: img-url-table
  layerArn: arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p38-Pillow:10
  pythonRequirements:
    dockerizePip: true
  apiGatewayAccountRole:
    Type: "Custom::ApiGatewayAccountRole"
    Properties:
      ServiceToken: !GetAtt ApiGatewayAccountRole.Arn

functions:
  s3_thumbnail_generator:
    handler: handler.s3_thumbnail_generator
    layers:
      - ${self:custom.layerArn}
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .png
  list:
    handler: handler.s3_get_thumbnails_urls
    layers:
      - ${self:custom.layerArn}
    events:
      - http:
          path: images
          method: get
          cors: true
  get:
    handler: handler.s3_get_thumbnail
    layers:
      - ${self:custom.layerArn}
    events:
      - http:
          path: images/{id}
          method: get
          cors: true

  delete:
    handler: handler.s3_delete_thumbnail
    layers:
      - ${self:custom.layerArn}
    events:
      - http:
          path: images/{id}
          method: delete
          cors: true

resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ApiGatewayAccountRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: serverlessApiGatewayCloudWatchRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "apigateway.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: ApiGatewayCloudWatchLogsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"

plugins:
  - serverless-python-requirements
